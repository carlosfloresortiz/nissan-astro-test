---
// HeroCarousel.astro

import { getStrapiImageUrl } from '../lib/strapi';
import type { Carousel, CarouselItem } from '../lib/strapi';

interface Props {
  heroCarouselData: Carousel;
}

const { heroCarouselData } = Astro.props;
const heroItems = heroCarouselData?.Items || [];
---
<section id="principal-carousel">
  <div class="carousel-container">
    {heroItems.map((item, index) => (
      <div
        class={`carousel-slide ${index === 0 ? 'active' : ''}`}
        id={`slide-${index + 1}`}
        data-index={index}
        style={{
          backgroundImage: item.Image?.url ? `url(${getStrapiImageUrl(item.Image)})` : 'none',
          backgroundSize: 'cover',
          backgroundPosition: 'center'
        }}
      >
        <div class="carousel-content">
          <h3 class="carousel-subtitle">{item.Subtitle ?? 'subtitutlo'}</h3>
          <h2 class="carousel-title">{item.Title ?? 'titulo'}</h2>
          <a href={item.Link_url ?? '/'} class="btn btn-secondary">{item.Link_text ?? 'link text'}</a>
        </div>
      </div>
    ))}

    <div class="carousel-thumbnails">
      {heroItems.map((item, index) => (
        <div
          class={`thumbnail-item ${index === 0 ? 'active' : ''}`}
          data-slide={index}
        >
          {item.Image?.url && (
            <img src={getStrapiImageUrl(item.Image)} alt={`Thumbnail ${index + 1}`} />
          )}
        </div>
      ))}
    </div>
  </div>
</section>

<style>
/* ---------------------------------------------------------------------- */
/* COMPONENTE: CARRUSEL PRINCIPAL
/* ---------------------------------------------------------------------- */

#principal-carousel {
  position: relative;
  width: 100%;
  margin-bottom: 60px;
}

#principal-carousel .carousel-container {
  position: relative;
  width: 100%;
  min-height: 85vh;
}

#principal-carousel .carousel-slide {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  transition: opacity 0.5s ease-in-out;
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
}


#principal-carousel .carousel-slide.active {
  opacity: 1;
}

#principal-carousel .carousel-content {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  position: absolute;
  top: 30%;
  left: 3%;
  color: white;
  z-index: 2;
}

#principal-carousel .carousel-title{
    font-style: normal;
    font-weight: 400;
    font-size: 42px;
}

#principal-carousel .carousel-subtitle {
    font-style: normal;
    font-weight: 700;
    font-size: 16px !important;
    line-height: 16px !important;
    letter-spacing: 2px !important;
}

#principal-carousel .carousel-thumbnails {
  position: absolute;
  bottom: -50px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  padding: 0 20px;
  overflow-x: auto;
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
}

#principal-carousel .thumbnail-item {
  position: relative;
  flex-shrink: 0;
  width: 190px;
  height: 120px;
  cursor: pointer;
  overflow: hidden;
  transition: all 0.3s ease;
}

#principal-carousel .thumbnail-item.active img {
  filter: brightness(0.5);
}

#principal-carousel .thumbnail-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Media Queries (Carrusel) */
@media (max-width: 768px) {
  #principal-carousel {
    margin-bottom: 100px;
  }

  #principal-carousel .carousel-content {
    left: 20px;
    right: 20px;
    max-width: none;
    transform: none;
    top: 15%;
    width: 100%;
  }

  #principal-carousel .carousel-title {
    font-size: 36px;
  }

  #principal-carousel .carousel-slide {
    background-position: center bottom;
  }

  #principal-carousel .carousel-thumbnails {
    bottom: -90px;
    width: 100%;
    padding: 0;
  }

  #principal-carousel .thumbnail-item {
    width: 135px;
    height: 90px;
  }

  #principal-carousel .carousel-container {
    height: 90vh;
    min-height: 400px;
  }
}

@media (max-width: 480px) {
  #principal-carousel .carousel-button {
    padding: 10px 20px;
    font-size: 0.9rem;
  }

  #principal-carousel .thumbnail-item {
    width: 50px;
    height: 38px;
  }
}

/* Ocultar scrollbar */
#principal-carousel .carousel-thumbnails::-webkit-scrollbar {
  display: none;
}

#principal-carousel .carousel-thumbnails {
  -ms-overflow-style: none;
  scrollbar-width: none;
}

#principal-carousel .thumbnail-item {
  position: relative;
}

:global(.thumbnail-progress-bar) {
  position: absolute;
  top: 0;
  left: 0;
  height: 5px; 
  width: 0; 
  background-color: #fff;
  z-index: 10;
}
</style>

<script>
class ImageCarousel {
  currentSlide: number;
  slides: NodeListOf<HTMLElement>;
  thumbnails: NodeListOf<HTMLElement>;
  thumbnailContainer: HTMLElement | null;
  transitionTime: number;
  remainingTime: number;
  startTime: number | null;
  autoPlayTimeout: ReturnType<typeof setTimeout> | null;
  isPaused: boolean;
  progressBar: HTMLElement | null;

  constructor() {
    this.currentSlide = 0;
    this.slides = document.querySelectorAll<HTMLElement>('.carousel-slide');
    this.thumbnails = document.querySelectorAll<HTMLElement>('.thumbnail-item');
    this.thumbnailContainer = document.querySelector<HTMLElement>('.carousel-thumbnails');

    this.transitionTime = 5000;
    this.remainingTime = this.transitionTime;
    this.startTime = null;
    this.autoPlayTimeout = null;
    this.isPaused = false;
    this.progressBar = null;

    this.init();
  }

  init() {
    this.bindEvents();
    this.createProgressBar();
    this.startAutoPlay();
  }

  bindEvents() {
    this.thumbnails.forEach((thumbnail, index) => {
      thumbnail.addEventListener('click', () => {
        this.goToSlide(index);
      });
    });

    const carousel = document.getElementById('principal-carousel');
    if (!carousel) return;

    let startX = 0;
    let endX = 0;

    carousel.addEventListener('touchstart', (e: TouchEvent) => {
      startX = e.touches[0].clientX;
      this.isPaused = true;
      this.pauseAutoPlay();
    });

    carousel.addEventListener('touchend', (e: TouchEvent) => {
      endX = e.changedTouches[0].clientX;
      this.handleSwipe(startX, endX);

      this.isPaused = false;
      this.startAutoPlay();
    });
  }

  handleSwipe(startX: number, endX: number) {
    const threshold = 50;
    const diff = startX - endX;

    if (Math.abs(diff) > threshold) {
      if (diff > 0) {
        this.nextSlide();
      } else {
        this.previousSlide();
      }
    }
  }

  goToSlide(index: number) {
    if (index === this.currentSlide) return;

    this.pauseAutoPlay();

    this.slides[this.currentSlide].classList.remove('active');
    this.thumbnails[this.currentSlide].classList.remove('active');

    if (this.progressBar) {
      this.progressBar.remove();
      this.progressBar = null;
    }

    this.currentSlide = index;

    this.slides[this.currentSlide].classList.add('active');
    this.thumbnails[this.currentSlide].classList.add('active');

    this.scrollThumbnailIntoView();

    this.remainingTime = this.transitionTime;

    this.createProgressBar();

    if (!this.isPaused) {
      this.startAutoPlay();
    }
  }

  nextSlide() {
    const nextIndex = (this.currentSlide + 1) % this.slides.length;
    this.goToSlide(nextIndex);
  }

  previousSlide() {
    const prevIndex =
      this.currentSlide === 0
        ? this.slides.length - 1
        : this.currentSlide - 1;
    this.goToSlide(prevIndex);
  }

  startAutoPlay() {
    if (this.autoPlayTimeout) return;

    this.startTime = Date.now();
    this.autoPlayTimeout = setTimeout(() => {
      this.nextSlide();
    }, this.remainingTime);

    if (this.progressBar) {
      requestAnimationFrame(() => {
        if (this.progressBar) {
          this.progressBar.style.transition = `width ${this.remainingTime}ms linear`;
          this.progressBar.style.width = '100%';
        }
      });
    }
  }

  pauseAutoPlay() {
    if (!this.autoPlayTimeout) return;

    clearTimeout(this.autoPlayTimeout);
    this.autoPlayTimeout = null;

    if (this.startTime) {
      const elapsedTime = Date.now() - this.startTime;
      this.remainingTime -= elapsedTime;
      if (this.remainingTime < 0) this.remainingTime = 0;
    }

    if (this.progressBar) {
      const currentWidth = window.getComputedStyle(this.progressBar).width;
      this.progressBar.style.transition = 'none';
      this.progressBar.style.width = currentWidth;
    }
  }

  createProgressBar() {
    if (this.progressBar) {
      this.progressBar.remove();
    }

    const activeThumbnail = this.thumbnails[this.currentSlide];
    
    this.progressBar = document.createElement('div');
    this.progressBar.className = 'thumbnail-progress-bar';
    
    // Estilos inline para asegurar visibilidad
    this.progressBar.style.position = 'absolute';
    this.progressBar.style.top = '0';
    this.progressBar.style.left = '0';
    this.progressBar.style.height = '5px';
    this.progressBar.style.width = '0%';
    this.progressBar.style.backgroundColor = '#fff'; 
    this.progressBar.style.zIndex = '999';
    this.progressBar.style.transition = 'none';
    
    activeThumbnail.appendChild(this.progressBar);

    void this.progressBar.offsetWidth;
  }

  scrollThumbnailIntoView() {
    const activeThumbnail = this.thumbnails[this.currentSlide];
    const container = this.thumbnailContainer;
    if (!container) return;

    const containerRect = container.getBoundingClientRect();
    const thumbnailRect = activeThumbnail.getBoundingClientRect();

    const isVisible =
      thumbnailRect.left >= containerRect.left &&
      thumbnailRect.right <= containerRect.right;

    if (!isVisible) {
      const scrollLeft =
        activeThumbnail.offsetLeft -
        container.offsetWidth / 2 +
        activeThumbnail.offsetWidth / 2;

      container.scrollTo({
        left: scrollLeft,
        behavior: 'smooth',
      });
    }
  }
}

document.addEventListener('DOMContentLoaded', () => {
  new ImageCarousel();
});
</script>
